import React, { useState, useEffect } from "react";
import { useSelector } from "react-redux";

const FeedbackSystem = () => {
  const { userInfo } = useSelector((state) => state.auth);
  const [activeTab, setActiveTab] = useState("submit");
  const [selectedCourse, setSelectedCourse] = useState("");
  const [selectedInstructor, setSelectedInstructor] = useState("");
  const [rating, setRating] = useState(0);
  const [hoverRating, setHoverRating] = useState(0);
  const [feedbackType, setFeedbackType] = useState("course");
  const [feedbackText, setFeedbackText] = useState("");
  const [isAnonymous, setIsAnonymous] = useState(false);
  const [tags, setTags] = useState([]);

  // Mock data
  const [courses] = useState([
    {
      id: 1,
      title: "JavaScript Fundamentals",
      instructor: "Nguy·ªÖn VƒÉn A",
      completed: true,
    },
    {
      id: 2,
      title: "React Development",
      instructor: "Tr·∫ßn Th·ªã B",
      completed: false,
    },
    {
      id: 3,
      title: "Node.js Backend",
      instructor: "L√™ VƒÉn C",
      completed: true,
    },
    {
      id: 4,
      title: "Python for Data Science",
      instructor: "Ph·∫°m Th·ªã D",
      completed: false,
    },
  ]);

  const [instructors] = useState([
    { id: 1, name: "Nguy·ªÖn VƒÉn A", avatar: "üë®‚Äçüè´", rating: 4.8, courses: 5 },
    { id: 2, name: "Tr·∫ßn Th·ªã B", avatar: "üë©‚Äçüè´", rating: 4.6, courses: 3 },
    { id: 3, name: "L√™ VƒÉn C", avatar: "üë®‚Äçüíª", rating: 4.9, courses: 8 },
    { id: 4, name: "Ph·∫°m Th·ªã D", avatar: "üë©‚Äçüíª", rating: 4.7, courses: 4 },
  ]);

  const [availableTags] = useState([
    "N·ªôi dung ch·∫•t l∆∞·ª£ng",
    "Gi·∫£ng vi√™n t·∫≠n t√¢m",
    "B√†i t·∫≠p th·ª±c t·∫ø",
    "H·ªó tr·ª£ t·ªët",
    "Kh√≥ hi·ªÉu",
    "Thi·∫øu th·ª±c h√†nh",
    "C·∫ßn c·∫£i thi·ªán",
    "T·ªëc ƒë·ªô ph√π h·ª£p",
    "Video ch·∫•t l∆∞·ª£ng cao",
    "T√†i li·ªáu ƒë·∫ßy ƒë·ªß",
    "T∆∞∆°ng t√°c t·ªët",
    "Gi√° tr·ªã th·ª±c t·∫ø",
  ]);

  const [myFeedbacks] = useState([
    {
      id: 1,
      type: "course",
      target: "JavaScript Fundamentals",
      rating: 5,
      text: "Kh√≥a h·ªçc r·∫•t hay, n·ªôi dung ƒë∆∞·ª£c tr√¨nh b√†y r√µ r√†ng v√† d·ªÖ hi·ªÉu. Gi·∫£ng vi√™n t·∫≠n t√¢m.",
      tags: ["N·ªôi dung ch·∫•t l∆∞·ª£ng", "Gi·∫£ng vi√™n t·∫≠n t√¢m"],
      date: "2024-01-20",
      status: "published",
      helpful: 12,
      instructor: "Nguy·ªÖn VƒÉn A",
    },
    {
      id: 2,
      type: "instructor",
      target: "Tr·∫ßn Th·ªã B",
      rating: 4,
      text: "C√¥ gi·∫£ng d·∫°y nhi·ªát t√¨nh, nh∆∞ng t·ªëc ƒë·ªô h∆°i nhanh v·ªõi ng∆∞·ªùi m·ªõi b·∫Øt ƒë·∫ßu.",
      tags: ["Gi·∫£ng vi√™n t·∫≠n t√¢m", "T·ªëc ƒë·ªô ph√π h·ª£p"],
      date: "2024-01-18",
      status: "published",
      helpful: 8,
      course: "React Development",
    },
    {
      id: 3,
      type: "platform",
      target: "H·ªá th·ªëng h·ªçc t·∫≠p",
      rating: 4,
      text: "Giao di·ªán th√¢n thi·ªán, d·ªÖ s·ª≠ d·ª•ng. Tuy nhi√™n c·∫ßn th√™m t√≠nh nƒÉng note taking.",
      tags: ["T∆∞∆°ng t√°c t·ªët", "C·∫ßn c·∫£i thi·ªán"],
      date: "2024-01-15",
      status: "pending",
      helpful: 0,
    },
  ]);

  const [recentFeedbacks] = useState([
    {
      id: 1,
      user: "Minh Anh",
      userAvatar: "üë©‚Äçüíº",
      course: "JavaScript Fundamentals",
      instructor: "Nguy·ªÖn VƒÉn A",
      rating: 5,
      text: "Kh√≥a h·ªçc xu·∫•t s·∫Øc! T·ª´ ng∆∞·ªùi kh√¥ng bi·∫øt g√¨ v·ªÅ JS, gi·ªù t√¥i ƒë√£ c√≥ th·ªÉ l√†m ƒë∆∞·ª£c nh·ªØng project nh·ªè.",
      date: "2024-01-21",
      helpful: 15,
      tags: ["N·ªôi dung ch·∫•t l∆∞·ª£ng", "B√†i t·∫≠p th·ª±c t·∫ø"],
    },
    {
      id: 2,
      user: "ƒê·ª©c Th√†nh",
      userAvatar: "üë®‚Äçüíª",
      course: "React Development",
      instructor: "Tr·∫ßn Th·ªã B",
      rating: 4,
      text: "N·ªôi dung hay nh∆∞ng c·∫ßn th√™m nhi·ªÅu b√†i t·∫≠p th·ª±c h√†nh h∆°n.",
      date: "2024-01-20",
      helpful: 8,
      tags: ["Thi·∫øu th·ª±c h√†nh", "N·ªôi dung ch·∫•t l∆∞·ª£ng"],
    },
    {
      id: 3,
      user: "Thu H√†",
      userAvatar: "üë©‚Äçüéì",
      course: "Python for Data Science",
      instructor: "Ph·∫°m Th·ªã D",
      rating: 5,
      text: "C√¥ gi·∫£ng r·∫•t chi ti·∫øt, code demo r·∫•t d·ªÖ hi·ªÉu. Recommend!",
      date: "2024-01-19",
      helpful: 22,
      tags: ["Gi·∫£ng vi√™n t·∫≠n t√¢m", "Video ch·∫•t l∆∞·ª£ng cao"],
    },
  ]);

  const feedbackTypes = [
    { value: "course", label: "üéì Kh√≥a h·ªçc", icon: "üéì" },
    { value: "instructor", label: "üë®‚Äçüè´ Gi·∫£ng vi√™n", icon: "üë®‚Äçüè´" },
    { value: "platform", label: "üíª N·ªÅn t·∫£ng", icon: "üíª" },
  ];

  const resetForm = () => {
    setSelectedCourse("");
    setSelectedInstructor("");
    setRating(0);
    setFeedbackText("");
    setTags([]);
    setIsAnonymous(false);
  };

  const handleTagToggle = (tag) => {
    setTags((prev) =>
      prev.includes(tag) ? prev.filter((t) => t !== tag) : [...prev, tag]
    );
  };

  const submitFeedback = () => {
    if (!rating || !feedbackText.trim()) {
      alert("Vui l√≤ng ƒëi·ªÅn ƒë·∫ßy ƒë·ªß ƒë√°nh gi√° v√† nh·∫≠n x√©t!");
      return;
    }

    if (feedbackType !== "platform" && !selectedCourse && !selectedInstructor) {
      alert("Vui l√≤ng ch·ªçn kh√≥a h·ªçc ho·∫∑c gi·∫£ng vi√™n!");
      return;
    }

    const newFeedback = {
      id: Date.now(),
      type: feedbackType,
      target:
        feedbackType === "course"
          ? courses.find((c) => c.id.toString() === selectedCourse)?.title
          : feedbackType === "instructor"
          ? instructors.find((i) => i.id.toString() === selectedInstructor)
              ?.name
          : "H·ªá th·ªëng h·ªçc t·∫≠p",
      rating: rating,
      text: feedbackText,
      tags: tags,
      date: new Date().toISOString().split("T")[0],
      status: "pending",
      helpful: 0,
      anonymous: isAnonymous,
    };

    alert(
      "C·∫£m ∆°n b·∫°n ƒë√£ ƒë√≥ng g√≥p √Ω ki·∫øn! Ph·∫£n h·ªìi c·ªßa b·∫°n s·∫Ω ƒë∆∞·ª£c xem x√©t v√† ƒëƒÉng t·∫£i s·ªõm."
    );
    resetForm();
  };

  const renderStarRating = (
    currentRating,
    onRatingChange = null,
    size = "1.5rem"
  ) => {
    return (
      <div style={{ display: "flex", gap: "0.2rem" }}>
        {[1, 2, 3, 4, 5].map((star) => (
          <span
            key={star}
            onClick={() => onRatingChange && onRatingChange(star)}
            onMouseEnter={() => onRatingChange && setHoverRating(star)}
            onMouseLeave={() => onRatingChange && setHoverRating(0)}
            style={{
              fontSize: size,
              color:
                star <= (hoverRating || currentRating) ? "#FFD700" : "#ddd",
              cursor: onRatingChange ? "pointer" : "default",
              transition: "color 0.2s",
            }}
          >
            ‚òÖ
          </span>
        ))}
      </div>
    );
  };

  const renderSubmitFeedback = () => (
    <div style={{ maxWidth: "800px", margin: "0 auto" }}>
      <div className="card" style={{ padding: "2rem" }}>
        <h3 style={{ marginBottom: "2rem" }}>‚úçÔ∏è Chia s·∫ª ph·∫£n h·ªìi c·ªßa b·∫°n</h3>

        {/* Feedback Type Selection */}
        <div style={{ marginBottom: "2rem" }}>
          <label
            style={{
              display: "block",
              marginBottom: "1rem",
              fontWeight: "bold",
            }}
          >
            Lo·∫°i ph·∫£n h·ªìi:
          </label>
          <div style={{ display: "flex", gap: "1rem" }}>
            {feedbackTypes.map((type) => (
              <label
                key={type.value}
                style={{
                  display: "flex",
                  alignItems: "center",
                  gap: "0.5rem",
                  padding: "1rem",
                  border:
                    feedbackType === type.value
                      ? "2px solid #667eea"
                      : "1px solid #ddd",
                  borderRadius: "8px",
                  cursor: "pointer",
                  background: feedbackType === type.value ? "#f8f9ff" : "white",
                  flex: 1,
                  textAlign: "center",
                }}
              >
                <input
                  type="radio"
                  name="feedbackType"
                  value={type.value}
                  checked={feedbackType === type.value}
                  onChange={(e) => setFeedbackType(e.target.value)}
                  style={{ display: "none" }}
                />
                <span style={{ fontSize: "1.5rem" }}>{type.icon}</span>
                <span>{type.label}</span>
              </label>
            ))}
          </div>
        </div>

        {/* Course/Instructor Selection */}
        {feedbackType !== "platform" && (
          <div
            style={{
              display: "grid",
              gridTemplateColumns: feedbackType === "course" ? "1fr" : "1fr",
              gap: "1rem",
              marginBottom: "2rem",
            }}
          >
            {feedbackType === "course" && (
              <div>
                <label
                  style={{
                    display: "block",
                    marginBottom: "0.5rem",
                    fontWeight: "bold",
                  }}
                >
                  Ch·ªçn kh√≥a h·ªçc:
                </label>
                <select
                  value={selectedCourse}
                  onChange={(e) => setSelectedCourse(e.target.value)}
                  style={{
                    width: "100%",
                    padding: "0.8rem",
                    border: "1px solid #ddd",
                    borderRadius: "6px",
                    fontSize: "1rem",
                  }}
                >
                  <option value="">-- Ch·ªçn kh√≥a h·ªçc --</option>
                  {courses.map((course) => (
                    <option key={course.id} value={course.id}>
                      {course.title} - {course.instructor}
                    </option>
                  ))}
                </select>
              </div>
            )}

            {feedbackType === "instructor" && (
              <div>
                <label
                  style={{
                    display: "block",
                    marginBottom: "0.5rem",
                    fontWeight: "bold",
                  }}
                >
                  Ch·ªçn gi·∫£ng vi√™n:
                </label>
                <select
                  value={selectedInstructor}
                  onChange={(e) => setSelectedInstructor(e.target.value)}
                  style={{
                    width: "100%",
                    padding: "0.8rem",
                    border: "1px solid #ddd",
                    borderRadius: "6px",
                    fontSize: "1rem",
                  }}
                >
                  <option value="">-- Ch·ªçn gi·∫£ng vi√™n --</option>
                  {instructors.map((instructor) => (
                    <option key={instructor.id} value={instructor.id}>
                      {instructor.name} (‚≠ê {instructor.rating})
                    </option>
                  ))}
                </select>
              </div>
            )}
          </div>
        )}

        {/* Rating */}
        <div style={{ marginBottom: "2rem" }}>
          <label
            style={{
              display: "block",
              marginBottom: "1rem",
              fontWeight: "bold",
            }}
          >
            ƒê√°nh gi√° t·ªïng th·ªÉ: *
          </label>
          <div style={{ display: "flex", alignItems: "center", gap: "1rem" }}>
            {renderStarRating(rating, setRating, "2rem")}
            <span style={{ fontSize: "1rem", color: "#666" }}>
              {rating > 0 &&
                (rating === 5
                  ? "Xu·∫•t s·∫Øc"
                  : rating === 4
                  ? "T·ªët"
                  : rating === 3
                  ? "Trung b√¨nh"
                  : rating === 2
                  ? "K√©m"
                  : "R·∫•t k√©m")}
            </span>
          </div>
        </div>

        {/* Feedback Text */}
        <div style={{ marginBottom: "2rem" }}>
          <label
            style={{
              display: "block",
              marginBottom: "0.5rem",
              fontWeight: "bold",
            }}
          >
            Nh·∫≠n x√©t chi ti·∫øt: *
          </label>
          <textarea
            value={feedbackText}
            onChange={(e) => setFeedbackText(e.target.value)}
            placeholder="Chia s·∫ª tr·∫£i nghi·ªám c·ªßa b·∫°n v·ªÅ kh√≥a h·ªçc, gi·∫£ng vi√™n ho·∫∑c n·ªÅn t·∫£ng..."
            rows="6"
            style={{
              width: "100%",
              padding: "1rem",
              border: "1px solid #ddd",
              borderRadius: "6px",
              fontSize: "1rem",
              resize: "vertical",
              fontFamily: "inherit",
            }}
          />
          <div
            style={{ fontSize: "0.8rem", color: "#666", marginTop: "0.5rem" }}
          >
            {feedbackText.length}/500 k√Ω t·ª±
          </div>
        </div>

        {/* Tags */}
        <div style={{ marginBottom: "2rem" }}>
          <label
            style={{
              display: "block",
              marginBottom: "1rem",
              fontWeight: "bold",
            }}
          >
            Ch·ªçn th·∫ª m√¥ t·∫£ (t√πy ch·ªçn):
          </label>
          <div style={{ display: "flex", flexWrap: "wrap", gap: "0.5rem" }}>
            {availableTags.map((tag) => (
              <button
                key={tag}
                type="button"
                onClick={() => handleTagToggle(tag)}
                style={{
                  padding: "0.5rem 1rem",
                  border: tags.includes(tag)
                    ? "2px solid #667eea"
                    : "1px solid #ddd",
                  borderRadius: "20px",
                  background: tags.includes(tag) ? "#f8f9ff" : "white",
                  color: tags.includes(tag) ? "#667eea" : "#666",
                  cursor: "pointer",
                  fontSize: "0.8rem",
                  transition: "all 0.2s",
                }}
              >
                {tag}
              </button>
            ))}
          </div>
        </div>

        {/* Anonymous Option */}
        <div style={{ marginBottom: "2rem" }}>
          <label
            style={{
              display: "flex",
              alignItems: "center",
              gap: "0.5rem",
              cursor: "pointer",
            }}
          >
            <input
              type="checkbox"
              checked={isAnonymous}
              onChange={(e) => setIsAnonymous(e.target.checked)}
            />
            <span>ƒêƒÉng ph·∫£n h·ªìi ·∫©n danh</span>
          </label>
        </div>

        {/* Submit Button */}
        <div style={{ display: "flex", gap: "1rem" }}>
          <button
            onClick={resetForm}
            style={{
              padding: "1rem 2rem",
              background: "#f0f0f0",
              color: "#666",
              border: "none",
              borderRadius: "6px",
              cursor: "pointer",
            }}
          >
            üîÑ X√≥a form
          </button>
          <button
            onClick={submitFeedback}
            style={{
              flex: 1,
              padding: "1rem 2rem",
              background: "linear-gradient(135deg, #667eea 0%, #764ba2 100%)",
              color: "white",
              border: "none",
              borderRadius: "6px",
              cursor: "pointer",
              fontWeight: "bold",
            }}
          >
            üìù G·ª≠i ph·∫£n h·ªìi
          </button>
        </div>
      </div>
    </div>
  );

  const renderMyFeedbacks = () => (
    <div>
      <div
        style={{
          display: "flex",
          justifyContent: "between",
          alignItems: "center",
          marginBottom: "2rem",
        }}
      >
        <h3>üìã Ph·∫£n h·ªìi c·ªßa b·∫°n</h3>
        <div style={{ fontSize: "0.9rem", color: "#666" }}>
          T·ªïng c·ªông: {myFeedbacks.length} ph·∫£n h·ªìi
        </div>
      </div>

      <div style={{ display: "flex", flexDirection: "column", gap: "1.5rem" }}>
        {myFeedbacks.map((feedback) => (
          <div key={feedback.id} className="card" style={{ padding: "1.5rem" }}>
            <div
              style={{
                display: "flex",
                justifyContent: "space-between",
                alignItems: "start",
                marginBottom: "1rem",
              }}
            >
              <div style={{ flex: 1 }}>
                <div
                  style={{
                    display: "flex",
                    alignItems: "center",
                    gap: "1rem",
                    marginBottom: "0.5rem",
                  }}
                >
                  <h4 style={{ margin: 0 }}>{feedback.target}</h4>
                  <span
                    style={{
                      background:
                        feedback.status === "published" ? "#4CAF50" : "#FF9800",
                      color: "white",
                      padding: "0.2rem 0.8rem",
                      borderRadius: "12px",
                      fontSize: "0.7rem",
                    }}
                  >
                    {feedback.status === "published"
                      ? "‚úÖ ƒê√£ ƒëƒÉng"
                      : "‚è≥ ƒêang x√©t duy·ªát"}
                  </span>
                </div>
                <div
                  style={{
                    fontSize: "0.8rem",
                    color: "#666",
                    marginBottom: "0.5rem",
                  }}
                >
                  {feedback.type === "course" &&
                    `Gi·∫£ng vi√™n: ${feedback.instructor}`}
                  {feedback.type === "instructor" &&
                    `Kh√≥a h·ªçc: ${feedback.course}`}
                  {feedback.type === "platform" && "Ph·∫£n h·ªìi v·ªÅ n·ªÅn t·∫£ng"}
                </div>
              </div>

              <div style={{ textAlign: "right" }}>
                {renderStarRating(feedback.rating)}
                <div
                  style={{
                    fontSize: "0.8rem",
                    color: "#666",
                    marginTop: "0.3rem",
                  }}
                >
                  {new Date(feedback.date).toLocaleDateString("vi-VN")}
                </div>
              </div>
            </div>

            <p
              style={{
                lineHeight: "1.6",
                marginBottom: "1rem",
                padding: "1rem",
                background: "#f8f9fa",
                borderRadius: "6px",
                fontStyle: "italic",
              }}
            >
              "{feedback.text}"
            </p>

            <div
              style={{
                display: "flex",
                flexWrap: "wrap",
                gap: "0.5rem",
                marginBottom: "1rem",
              }}
            >
              {feedback.tags.map((tag, index) => (
                <span
                  key={index}
                  style={{
                    background: "#667eea",
                    color: "white",
                    padding: "0.3rem 0.8rem",
                    borderRadius: "15px",
                    fontSize: "0.7rem",
                  }}
                >
                  {tag}
                </span>
              ))}
            </div>

            <div
              style={{
                display: "flex",
                justifyContent: "space-between",
                alignItems: "center",
              }}
            >
              <div style={{ fontSize: "0.8rem", color: "#666" }}>
                {feedback.helpful > 0 &&
                  `${feedback.helpful} ng∆∞·ªùi th·∫•y h·ªØu √≠ch`}
              </div>

              <div style={{ display: "flex", gap: "0.5rem" }}>
                <button
                  style={{
                    padding: "0.5rem 1rem",
                    background: "#f0f0f0",
                    color: "#666",
                    border: "none",
                    borderRadius: "4px",
                    cursor: "pointer",
                    fontSize: "0.8rem",
                  }}
                >
                  ‚úèÔ∏è Ch·ªânh s·ª≠a
                </button>
                <button
                  style={{
                    padding: "0.5rem 1rem",
                    background: "#ffebee",
                    color: "#f44336",
                    border: "none",
                    borderRadius: "4px",
                    cursor: "pointer",
                    fontSize: "0.8rem",
                  }}
                >
                  üóëÔ∏è X√≥a
                </button>
              </div>
            </div>
          </div>
        ))}
      </div>
    </div>
  );

  const renderAllFeedbacks = () => (
    <div>
      <div
        style={{
          display: "flex",
          justifyContent: "space-between",
          alignItems: "center",
          marginBottom: "2rem",
        }}
      >
        <h3>üí¨ Ph·∫£n h·ªìi t·ª´ c·ªông ƒë·ªìng</h3>
        <div style={{ display: "flex", gap: "1rem", alignItems: "center" }}>
          <select
            style={{
              padding: "0.5rem",
              border: "1px solid #ddd",
              borderRadius: "4px",
            }}
          >
            <option>T·∫•t c·∫£ kh√≥a h·ªçc</option>
            {courses.map((course) => (
              <option key={course.id}>{course.title}</option>
            ))}
          </select>
          <select
            style={{
              padding: "0.5rem",
              border: "1px solid #ddd",
              borderRadius: "4px",
            }}
          >
            <option>S·∫Øp x·∫øp theo</option>
            <option>M·ªõi nh·∫•t</option>
            <option>H·ªØu √≠ch nh·∫•t</option>
            <option>ƒê√°nh gi√° cao nh·∫•t</option>
          </select>
        </div>
      </div>

      <div style={{ display: "flex", flexDirection: "column", gap: "1.5rem" }}>
        {recentFeedbacks.map((feedback) => (
          <div key={feedback.id} className="card" style={{ padding: "1.5rem" }}>
            <div style={{ display: "flex", gap: "1rem", marginBottom: "1rem" }}>
              <div style={{ fontSize: "2.5rem" }}>{feedback.userAvatar}</div>

              <div style={{ flex: 1 }}>
                <div
                  style={{
                    display: "flex",
                    justifyContent: "space-between",
                    alignItems: "start",
                    marginBottom: "0.5rem",
                  }}
                >
                  <div>
                    <h4 style={{ margin: "0 0 0.3rem 0" }}>{feedback.user}</h4>
                    <div style={{ fontSize: "0.8rem", color: "#666" }}>
                      {feedback.course} ‚Ä¢ {feedback.instructor}
                    </div>
                  </div>

                  <div style={{ textAlign: "right" }}>
                    {renderStarRating(feedback.rating)}
                    <div
                      style={{
                        fontSize: "0.7rem",
                        color: "#666",
                        marginTop: "0.3rem",
                      }}
                    >
                      {new Date(feedback.date).toLocaleDateString("vi-VN")}
                    </div>
                  </div>
                </div>
              </div>
            </div>

            <p
              style={{
                lineHeight: "1.6",
                marginBottom: "1rem",
                padding: "1rem",
                background: "#f8f9fa",
                borderRadius: "6px",
                fontStyle: "italic",
                borderLeft: "4px solid #667eea",
              }}
            >
              "{feedback.text}"
            </p>

            <div
              style={{
                display: "flex",
                flexWrap: "wrap",
                gap: "0.5rem",
                marginBottom: "1rem",
              }}
            >
              {feedback.tags.map((tag, index) => (
                <span
                  key={index}
                  style={{
                    background: "#e3f2fd",
                    color: "#1976d2",
                    padding: "0.3rem 0.8rem",
                    borderRadius: "15px",
                    fontSize: "0.7rem",
                    border: "1px solid #bbdefb",
                  }}
                >
                  {tag}
                </span>
              ))}
            </div>

            <div
              style={{
                display: "flex",
                justifyContent: "space-between",
                alignItems: "center",
              }}
            >
              <div
                style={{ display: "flex", gap: "1rem", alignItems: "center" }}
              >
                <button
                  style={{
                    background: "none",
                    border: "none",
                    color: "#666",
                    cursor: "pointer",
                    display: "flex",
                    alignItems: "center",
                    gap: "0.3rem",
                    fontSize: "0.8rem",
                  }}
                >
                  üëç H·ªØu √≠ch ({feedback.helpful})
                </button>
                <button
                  style={{
                    background: "none",
                    border: "none",
                    color: "#666",
                    cursor: "pointer",
                    display: "flex",
                    alignItems: "center",
                    gap: "0.3rem",
                    fontSize: "0.8rem",
                  }}
                >
                  üí¨ Tr·∫£ l·ªùi
                </button>
              </div>

              <button
                style={{
                  background: "none",
                  border: "none",
                  color: "#999",
                  cursor: "pointer",
                  fontSize: "0.8rem",
                }}
              >
                üì¢ B√°o c√°o
              </button>
            </div>
          </div>
        ))}
      </div>

      {/* Load More */}
      <div style={{ textAlign: "center", marginTop: "2rem" }}>
        <button
          style={{
            padding: "1rem 2rem",
            background: "#f0f0f0",
            color: "#666",
            border: "none",
            borderRadius: "6px",
            cursor: "pointer",
          }}
        >
          üìÑ Xem th√™m ph·∫£n h·ªìi
        </button>
      </div>
    </div>
  );

  return (
    <div className="main-container">
      <div
        style={{
          background: "white",
          padding: "1.5rem",
          borderRadius: "10px",
          marginBottom: "2rem",
          boxShadow: "0 4px 15px rgba(0,0,0,0.1)",
        }}
      >
        <h1 style={{ margin: "0 0 0.5rem 0" }}>üí≠ H·ªá th·ªëng ph·∫£n h·ªìi</h1>
        <p style={{ margin: 0, color: "#666" }}>
          Chia s·∫ª tr·∫£i nghi·ªám v√† ƒë√≥ng g√≥p √Ω ki·∫øn ƒë·ªÉ c·∫£i thi·ªán ch·∫•t l∆∞·ª£ng h·ªçc t·∫≠p
        </p>
      </div>

      {/* Tabs */}
      <div style={{ marginBottom: "2rem" }}>
        <div
          style={{
            display: "flex",
            gap: "1rem",
            borderBottom: "2px solid #f0f0f0",
          }}
        >
          {[
            { key: "submit", label: "‚úçÔ∏è G·ª≠i ph·∫£n h·ªìi" },
            { key: "my-feedbacks", label: "üìã Ph·∫£n h·ªìi c·ªßa t√¥i" },
            { key: "all-feedbacks", label: "üí¨ Ph·∫£n h·ªìi c·ªông ƒë·ªìng" },
          ].map((tab) => (
            <button
              key={tab.key}
              onClick={() => setActiveTab(tab.key)}
              style={{
                padding: "1rem 2rem",
                background: "none",
                border: "none",
                borderBottom:
                  activeTab === tab.key
                    ? "3px solid #667eea"
                    : "3px solid transparent",
                color: activeTab === tab.key ? "#667eea" : "#666",
                cursor: "pointer",
                fontWeight: activeTab === tab.key ? "bold" : "normal",
                fontSize: "1rem",
              }}
            >
              {tab.label}
            </button>
          ))}
        </div>
      </div>

      {/* Tab Content */}
      {activeTab === "submit" && renderSubmitFeedback()}
      {activeTab === "my-feedbacks" && renderMyFeedbacks()}
      {activeTab === "all-feedbacks" && renderAllFeedbacks()}
    </div>
  );
};

export default FeedbackSystem;
