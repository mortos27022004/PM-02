import React, { useState, useEffect } from "react";
import { useSelector } from "react-redux";

const Notifications = () => {
  const { userInfo } = useSelector((state) => state.auth);
  const [activeTab, setActiveTab] = useState("all");
  const [notifications, setNotifications] = useState([]);

  // Mock notifications data
  const [allNotifications] = useState([
    {
      id: 1,
      type: "course",
      title: "Kh√≥a h·ªçc m·ªõi: Advanced React Patterns",
      message:
        "Kh√≥a h·ªçc Advanced React Patterns v·ª´a ƒë∆∞·ª£c ph√°t h√†nh. ƒêƒÉng k√Ω ngay ƒë·ªÉ h·ªçc c√°c pattern n√¢ng cao!",
      timestamp: "2025-10-02T10:30:00",
      read: false,
      icon: "üìö",
      action: {
        text: "Xem kh√≥a h·ªçc",
        link: "/course/6",
      },
    },
    {
      id: 2,
      type: "assignment",
      title: "B√†i t·∫≠p React Hooks ƒë√£ ƒë∆∞·ª£c ch·∫•m",
      message:
        "B√†i t·∫≠p 'React Hooks' c·ªßa b·∫°n ƒë√£ ƒë∆∞·ª£c ch·∫•m ƒëi·ªÉm. ƒêi·ªÉm s·ªë: 85/100",
      timestamp: "2025-10-02T09:15:00",
      read: false,
      icon: "üìù",
      action: {
        text: "Xem k·∫øt qu·∫£",
        link: "/assignments/1",
      },
    },
    {
      id: 3,
      type: "system",
      title: "C·∫≠p nh·∫≠t h·ªá th·ªëng",
      message:
        "H·ªá th·ªëng s·∫Ω ƒë∆∞·ª£c b·∫£o tr√¨ t·ª´ 23:00 - 02:00 ng√†y mai. Vui l√≤ng ho√†n th√†nh b√†i h·ªçc tr∆∞·ªõc th·ªùi gian n√†y.",
      timestamp: "2025-10-01T16:45:00",
      read: true,
      icon: "‚öôÔ∏è",
    },
    {
      id: 4,
      type: "community",
      title: "B·∫°n c√≥ mention m·ªõi trong c·ªông ƒë·ªìng",
      message:
        "Nguy·ªÖn VƒÉn A ƒë√£ tag b·∫°n trong cu·ªôc th·∫£o lu·∫≠n 'Best practices for React hooks'",
      timestamp: "2025-10-01T14:20:00",
      read: true,
      icon: "üí¨",
      action: {
        text: "Xem th·∫£o lu·∫≠n",
        link: "/community/post/123",
      },
    },
    {
      id: 5,
      type: "achievement",
      title: "Ch√∫c m·ª´ng! B·∫°n ƒë√£ ƒë·∫°t huy hi·ªáu m·ªõi",
      message:
        "B·∫°n v·ª´a m·ªü kh√≥a huy hi·ªáu 'Ng∆∞·ªùi h·ªçc ki√™n tr√¨' sau 30 ng√†y h·ªçc li√™n t·ª•c!",
      timestamp: "2025-09-30T20:10:00",
      read: true,
      icon: "üèÜ",
      action: {
        text: "Xem huy hi·ªáu",
        link: "/achievements",
      },
    },
    {
      id: 6,
      type: "payment",
      title: "Thanh to√°n th√†nh c√¥ng",
      message:
        "B·∫°n ƒë√£ thanh to√°n th√†nh c√¥ng cho kh√≥a h·ªçc 'JavaScript Advanced'. Ch√∫c b·∫°n h·ªçc t·∫≠p vui v·∫ª!",
      timestamp: "2025-09-29T11:30:00",
      read: true,
      icon: "üí≥",
    },
    {
      id: 7,
      type: "reminder",
      title: "Nh·∫Øc nh·ªü: B√†i h·ªçc h√¥m nay",
      message:
        "B·∫°n c√≥ 2 b√†i h·ªçc ƒë∆∞·ª£c l√™n l·ªãch cho h√¥m nay. ƒê·ª´ng qu√™n ho√†n th√†nh nh√©!",
      timestamp: "2025-09-28T08:00:00",
      read: true,
      icon: "‚è∞",
      action: {
        text: "Xem l·ªãch h·ªçc",
        link: "/today",
      },
    },
  ]);

  useEffect(() => {
    filterNotifications();
  }, [activeTab]);

  const filterNotifications = () => {
    let filtered = [...allNotifications];

    switch (activeTab) {
      case "unread":
        filtered = filtered.filter((n) => !n.read);
        break;
      case "course":
        filtered = filtered.filter((n) => n.type === "course");
        break;
      case "assignment":
        filtered = filtered.filter((n) => n.type === "assignment");
        break;
      case "system":
        filtered = filtered.filter((n) => n.type === "system");
        break;
      default:
        // "all" case - show all notifications
        break;
    }

    setNotifications(filtered);
  };

  const markAsRead = (notificationId) => {
    const updatedNotifications = allNotifications.map((n) =>
      n.id === notificationId ? { ...n, read: true } : n
    );
    // In real app, this would update the global state
    filterNotifications();
  };

  const markAllAsRead = () => {
    // In real app, this would update all notifications to read
    alert("ƒê√£ ƒë√°nh d·∫•u t·∫•t c·∫£ th√¥ng b√°o l√† ƒë√£ ƒë·ªçc");
  };

  const deleteNotification = (notificationId) => {
    if (window.confirm("B·∫°n c√≥ ch·∫Øc mu·ªën x√≥a th√¥ng b√°o n√†y?")) {
      // In real app, this would remove from global state
      const filtered = notifications.filter((n) => n.id !== notificationId);
      setNotifications(filtered);
    }
  };

  const getTypeText = (type) => {
    const typeMap = {
      course: "Kh√≥a h·ªçc",
      assignment: "B√†i t·∫≠p",
      system: "H·ªá th·ªëng",
      community: "C·ªông ƒë·ªìng",
      achievement: "Th√†nh t√≠ch",
      payment: "Thanh to√°n",
      reminder: "Nh·∫Øc nh·ªü",
    };
    return typeMap[type] || type;
  };

  const getTypeColor = (type) => {
    const colorMap = {
      course: "#667eea",
      assignment: "#FF9800",
      system: "#F44336",
      community: "#4CAF50",
      achievement: "#9C27B0",
      payment: "#2196F3",
      reminder: "#FF5722",
    };
    return colorMap[type] || "#666";
  };

  const formatTime = (timestamp) => {
    const now = new Date();
    const time = new Date(timestamp);
    const diffInHours = Math.floor((now - time) / (1000 * 60 * 60));

    if (diffInHours < 1) {
      const diffInMinutes = Math.floor((now - time) / (1000 * 60));
      return `${diffInMinutes} ph√∫t tr∆∞·ªõc`;
    } else if (diffInHours < 24) {
      return `${diffInHours} gi·ªù tr∆∞·ªõc`;
    } else {
      const diffInDays = Math.floor(diffInHours / 24);
      return `${diffInDays} ng√†y tr∆∞·ªõc`;
    }
  };

  const unreadCount = allNotifications.filter((n) => !n.read).length;

  return (
    <div className="main-container">
      <div
        style={{
          background: "white",
          padding: "1.5rem",
          borderRadius: "10px",
          marginBottom: "2rem",
          boxShadow: "0 4px 15px rgba(0,0,0,0.1)",
        }}
      >
        <div
          style={{
            display: "flex",
            justifyContent: "space-between",
            alignItems: "center",
          }}
        >
          <div>
            <h1 style={{ margin: "0 0 0.5rem 0" }}>üîî Th√¥ng b√°o</h1>
            <p style={{ margin: 0, color: "#666" }}>
              B·∫°n c√≥ {unreadCount} th√¥ng b√°o ch∆∞a ƒë·ªçc
            </p>
          </div>

          <button
            onClick={markAllAsRead}
            style={{
              padding: "0.8rem 1.5rem",
              background: "#667eea",
              color: "white",
              border: "none",
              borderRadius: "8px",
              cursor: "pointer",
              fontWeight: "bold",
            }}
          >
            ƒê√°nh d·∫•u t·∫•t c·∫£ ƒë√£ ƒë·ªçc
          </button>
        </div>
      </div>

      {/* Tabs */}
      <div style={{ marginBottom: "2rem" }}>
        <div
          style={{
            display: "flex",
            gap: "1rem",
            borderBottom: "2px solid #f0f0f0",
            flexWrap: "wrap",
          }}
        >
          {[
            { key: "all", label: "T·∫•t c·∫£", count: allNotifications.length },
            { key: "unread", label: "Ch∆∞a ƒë·ªçc", count: unreadCount },
            {
              key: "course",
              label: "Kh√≥a h·ªçc",
              count: allNotifications.filter((n) => n.type === "course").length,
            },
            {
              key: "assignment",
              label: "B√†i t·∫≠p",
              count: allNotifications.filter((n) => n.type === "assignment")
                .length,
            },
            {
              key: "system",
              label: "H·ªá th·ªëng",
              count: allNotifications.filter((n) => n.type === "system").length,
            },
          ].map((tab) => (
            <button
              key={tab.key}
              onClick={() => setActiveTab(tab.key)}
              style={{
                padding: "1rem 1.5rem",
                background: "none",
                border: "none",
                borderBottom:
                  activeTab === tab.key
                    ? "3px solid #667eea"
                    : "3px solid transparent",
                color: activeTab === tab.key ? "#667eea" : "#666",
                cursor: "pointer",
                fontWeight: activeTab === tab.key ? "bold" : "normal",
                fontSize: "1rem",
                display: "flex",
                alignItems: "center",
                gap: "0.5rem",
              }}
            >
              {tab.label}
              {tab.count > 0 && (
                <span
                  style={{
                    background: activeTab === tab.key ? "#667eea" : "#ccc",
                    color: "white",
                    borderRadius: "10px",
                    padding: "0.2rem 0.5rem",
                    fontSize: "0.7rem",
                    minWidth: "20px",
                    textAlign: "center",
                  }}
                >
                  {tab.count}
                </span>
              )}
            </button>
          ))}
        </div>
      </div>

      {/* Notifications List */}
      <div>
        {notifications.length === 0 ? (
          <div style={{ textAlign: "center", padding: "3rem" }}>
            <div style={{ fontSize: "3rem", marginBottom: "1rem" }}>üì≠</div>
            <h3>Kh√¥ng c√≥ th√¥ng b√°o n√†o</h3>
            <p style={{ color: "#666" }}>
              {activeTab === "unread"
                ? "B·∫°n ƒë√£ ƒë·ªçc h·∫øt t·∫•t c·∫£ th√¥ng b√°o!"
                : "Ch∆∞a c√≥ th√¥ng b√°o n√†o trong danh m·ª•c n√†y."}
            </p>
          </div>
        ) : (
          notifications.map((notification) => (
            <div
              key={notification.id}
              style={{
                background: "white",
                padding: "1.5rem",
                borderRadius: "10px",
                marginBottom: "1rem",
                boxShadow: "0 2px 10px rgba(0,0,0,0.1)",
                border: notification.read ? "none" : "2px solid #667eea",
                position: "relative",
              }}
            >
              <div style={{ display: "flex", gap: "1rem" }}>
                <div style={{ fontSize: "2rem", flexShrink: 0 }}>
                  {notification.icon}
                </div>

                <div style={{ flex: 1 }}>
                  <div
                    style={{
                      display: "flex",
                      justifyContent: "space-between",
                      alignItems: "start",
                      marginBottom: "0.5rem",
                    }}
                  >
                    <div>
                      <h4 style={{ margin: "0 0 0.3rem 0" }}>
                        {notification.title}
                        {!notification.read && (
                          <span
                            style={{
                              background: "#FF4444",
                              color: "white",
                              borderRadius: "50%",
                              width: "8px",
                              height: "8px",
                              display: "inline-block",
                              marginLeft: "0.5rem",
                            }}
                          />
                        )}
                      </h4>
                      <div
                        style={{
                          display: "flex",
                          gap: "1rem",
                          alignItems: "center",
                          marginBottom: "0.5rem",
                        }}
                      >
                        <span
                          style={{
                            background: getTypeColor(notification.type),
                            color: "white",
                            padding: "0.2rem 0.6rem",
                            borderRadius: "12px",
                            fontSize: "0.7rem",
                          }}
                        >
                          {getTypeText(notification.type)}
                        </span>
                        <span style={{ fontSize: "0.8rem", color: "#666" }}>
                          {formatTime(notification.timestamp)}
                        </span>
                      </div>
                    </div>

                    <button
                      onClick={() => deleteNotification(notification.id)}
                      style={{
                        background: "none",
                        border: "none",
                        color: "#999",
                        cursor: "pointer",
                        fontSize: "1.2rem",
                        padding: "0.2rem",
                      }}
                      title="X√≥a th√¥ng b√°o"
                    >
                      ‚úï
                    </button>
                  </div>

                  <p
                    style={{
                      margin: "0 0 1rem 0",
                      lineHeight: "1.5",
                      color: "#333",
                    }}
                  >
                    {notification.message}
                  </p>

                  <div
                    style={{
                      display: "flex",
                      gap: "1rem",
                      alignItems: "center",
                    }}
                  >
                    {notification.action && (
                      <button
                        onClick={() =>
                          (window.location.href = notification.action.link)
                        }
                        style={{
                          padding: "0.5rem 1rem",
                          background: "#667eea",
                          color: "white",
                          border: "none",
                          borderRadius: "6px",
                          cursor: "pointer",
                          fontSize: "0.9rem",
                        }}
                      >
                        {notification.action.text}
                      </button>
                    )}

                    {!notification.read && (
                      <button
                        onClick={() => markAsRead(notification.id)}
                        style={{
                          padding: "0.5rem 1rem",
                          background: "#f0f0f0",
                          color: "#666",
                          border: "none",
                          borderRadius: "6px",
                          cursor: "pointer",
                          fontSize: "0.9rem",
                        }}
                      >
                        ƒê√°nh d·∫•u ƒë√£ ƒë·ªçc
                      </button>
                    )}
                  </div>
                </div>
              </div>
            </div>
          ))
        )}
      </div>
    </div>
  );
};

export default Notifications;
