import React, { useState, useEffect } from "react";
import { useSelector } from "react-redux";
import "./AnalyticsDashboard.css";

const AnalyticsDashboard = () => {
  const { user } = useSelector((state) => state.auth);
  const [activeTab, setActiveTab] = useState("students");
  const [dateRange, setDateRange] = useState("30days");
  const [selectedCourse, setSelectedCourse] = useState("all");
  const [filterStatus, setFilterStatus] = useState("all");
  const [loading, setLoading] = useState(false);
  const [exportLoading, setExportLoading] = useState(false);

  const [analyticsData, setAnalyticsData] = useState({
    studentStats: {
      total: 1250,
      active: 890,
      completed: 234,
      atRisk: 126,
      growth: 12.5,
    },
    learningStats: {
      totalCourses: 45,
      completionRate: 78.5,
      averageScore: 8.2,
      totalStudyHours: 15680,
      certificatesIssued: 234,
    },
    topCourses: [
      {
        id: 1,
        name: "JavaScript C∆° B·∫£n",
        students: 345,
        completion: 85,
        rating: 4.8,
      },
      {
        id: 2,
        name: "React Advanced",
        students: 289,
        completion: 76,
        rating: 4.6,
      },
      {
        id: 3,
        name: "Python for Beginners",
        students: 267,
        completion: 91,
        rating: 4.9,
      },
      {
        id: 4,
        name: "Node.js Backend",
        students: 198,
        completion: 69,
        rating: 4.4,
      },
      {
        id: 5,
        name: "Vue.js Fundamentals",
        students: 156,
        completion: 82,
        rating: 4.7,
      },
    ],
    reports: [
      {
        id: 1,
        type: "comment",
        content: "B√¨nh lu·∫≠n c√≥ n·ªôi dung kh√¥ng ph√π h·ª£p v·ªÅ ch√≠nh tr·ªã",
        author: "Nguy·ªÖn VƒÉn A",
        course: "JavaScript C∆° B·∫£n",
        reportedBy: "Tr·∫ßn Th·ªã B",
        reportedAt: new Date(Date.now() - 1000 * 60 * 60 * 2),
        status: "pending",
        severity: "high",
      },
      {
        id: 2,
        type: "comment",
        content: "Spam link qu·∫£ng c√°o",
        author: "L√™ VƒÉn C",
        course: "React Advanced",
        reportedBy: "Ph·∫°m Th·ªã D",
        reportedAt: new Date(Date.now() - 1000 * 60 * 60 * 6),
        status: "pending",
        severity: "medium",
      },
      {
        id: 3,
        type: "comment",
        content: "Ng√¥n t·ª´ th√¥ t·ª•c, x√∫c ph·∫°m ng∆∞·ªùi kh√°c",
        author: "Ho√†ng VƒÉn E",
        course: "Python Basics",
        reportedBy: "Mai Th·ªã F",
        reportedAt: new Date(Date.now() - 1000 * 60 * 60 * 24),
        status: "resolved",
        severity: "high",
        action: "hidden",
        resolvedBy: user?.name,
        resolvedAt: new Date(Date.now() - 1000 * 60 * 60 * 12),
      },
    ],
  });

  const [courses, setCourses] = useState([]);
  const [chartData, setChartData] = useState({});

  useEffect(() => {
    loadCourses();
    loadChartData();
  }, [dateRange, selectedCourse]);

  const loadCourses = () => {
    const mockCourses = [
      { id: "all", name: "T·∫•t c·∫£ kh√≥a h·ªçc" },
      { id: 1, name: "JavaScript C∆° B·∫£n" },
      { id: 2, name: "React Advanced" },
      { id: 3, name: "Python for Beginners" },
      { id: 4, name: "Node.js Backend" },
      { id: 5, name: "Vue.js Fundamentals" },
    ];
    setCourses(mockCourses);
  };

  const loadChartData = () => {
    // Simulate chart data based on date range
    const days = dateRange === "7days" ? 7 : dateRange === "30days" ? 30 : 90;
    const enrollmentData = [];
    const progressData = [];

    for (let i = days - 1; i >= 0; i--) {
      const date = new Date();
      date.setDate(date.getDate() - i);

      enrollmentData.push({
        date: date.toLocaleDateString("vi-VN"),
        students: Math.floor(Math.random() * 20) + 5,
      });

      progressData.push({
        date: date.toLocaleDateString("vi-VN"),
        completed: Math.floor(Math.random() * 15) + 2,
        inProgress: Math.floor(Math.random() * 25) + 10,
      });
    }

    setChartData({
      enrollment: enrollmentData,
      progress: progressData,
    });
  };

  const handleReportAction = (reportId, action) => {
    setAnalyticsData((prev) => ({
      ...prev,
      reports: prev.reports.map((report) =>
        report.id === reportId
          ? {
              ...report,
              status: "resolved",
              action,
              resolvedBy: user?.name,
              resolvedAt: new Date(),
            }
          : report
      ),
    }));

    alert(`ƒê√£ ${action === "hidden" ? "·∫©n" : "g·ª°"} b√¨nh lu·∫≠n th√†nh c√¥ng`);
  };

  const exportData = (type) => {
    setExportLoading(true);

    setTimeout(() => {
      let data = [];
      let filename = "";

      if (type === "students") {
        data = [
          ["Th·ªëng k√™ h·ªçc vi√™n", ""],
          ["Kho·∫£ng th·ªùi gian", dateRange],
          ["Ng√†y xu·∫•t", new Date().toLocaleDateString("vi-VN")],
          [""],
          ["Ch·ªâ s·ªë", "Gi√° tr·ªã"],
          ["T·ªïng h·ªçc vi√™n", analyticsData.studentStats.total],
          ["ƒêang ho·∫°t ƒë·ªông", analyticsData.studentStats.active],
          ["Ho√†n th√†nh kh√≥a", analyticsData.studentStats.completed],
          ["C√≥ nguy c∆° b·ªè h·ªçc", analyticsData.studentStats.atRisk],
          ["TƒÉng tr∆∞·ªüng (%)", analyticsData.studentStats.growth],
        ];
        filename = "student_analytics";
      } else if (type === "learning") {
        data = [
          ["Th·ªëng k√™ h·ªçc t·∫≠p", ""],
          ["Kho·∫£ng th·ªùi gian", dateRange],
          ["Ng√†y xu·∫•t", new Date().toLocaleDateString("vi-VN")],
          [""],
          ["Ch·ªâ s·ªë", "Gi√° tr·ªã"],
          ["T·ªïng kh√≥a h·ªçc", analyticsData.learningStats.totalCourses],
          ["T·ª∑ l·ªá ho√†n th√†nh (%)", analyticsData.learningStats.completionRate],
          ["ƒêi·ªÉm trung b√¨nh", analyticsData.learningStats.averageScore],
          ["Gi·ªù h·ªçc t·ªïng", analyticsData.learningStats.totalStudyHours],
          ["Ch·ª©ng ch·ªâ c·∫•p", analyticsData.learningStats.certificatesIssued],
        ];
        filename = "learning_analytics";
      } else if (type === "courses") {
        data = [
          ["Top kh√≥a h·ªçc ph·ªï bi·∫øn", "", "", "", ""],
          ["T√™n kh√≥a h·ªçc", "H·ªçc vi√™n", "Ho√†n th√†nh (%)", "ƒê√°nh gi√°", ""],
          ...analyticsData.topCourses.map((course) => [
            course.name,
            course.students,
            course.completion,
            course.rating,
            "",
          ]),
        ];
        filename = "top_courses";
      }

      const csvContent = data.map((row) => row.join(",")).join("\n");
      const blob = new Blob(["\uFEFF" + csvContent], {
        type: "text/csv;charset=utf-8;",
      });
      const link = document.createElement("a");
      link.href = URL.createObjectURL(blob);
      link.download = `${filename}_${
        new Date().toISOString().split("T")[0]
      }.csv`;
      link.click();

      setExportLoading(false);
      alert("ƒê√£ xu·∫•t d·ªØ li·ªáu th√†nh c√¥ng");
    }, 1500);
  };

  const getReportSeverityColor = (severity) => {
    const colors = {
      high: "#e74c3c",
      medium: "#f39c12",
      low: "#27ae60",
    };
    return colors[severity] || "#666";
  };

  const getReportStatusColor = (status) => {
    const colors = {
      pending: "#f39c12",
      resolved: "#27ae60",
      rejected: "#e74c3c",
    };
    return colors[status] || "#666";
  };

  const renderStudentAnalytics = () => (
    <div className="analytics-section">
      <div className="section-header">
        <h3>üë• Th·ªëng k√™ h·ªçc vi√™n</h3>
        <button
          className="export-btn"
          onClick={() => exportData("students")}
          disabled={exportLoading}
        >
          {exportLoading ? "‚è≥" : "üìä"} Xu·∫•t d·ªØ li·ªáu
        </button>
      </div>

      <div className="stats-overview">
        <div className="stat-card primary">
          <div className="stat-number">
            {analyticsData.studentStats.total.toLocaleString()}
          </div>
          <div className="stat-label">T·ªïng h·ªçc vi√™n</div>
          <div className="stat-change positive">
            +{analyticsData.studentStats.growth}% so v·ªõi th√°ng tr∆∞·ªõc
          </div>
        </div>

        <div className="stat-card">
          <div className="stat-number">
            {analyticsData.studentStats.active.toLocaleString()}
          </div>
          <div className="stat-label">ƒêang ho·∫°t ƒë·ªông</div>
          <div className="stat-percentage">
            {Math.round(
              (analyticsData.studentStats.active /
                analyticsData.studentStats.total) *
                100
            )}
            %
          </div>
        </div>

        <div className="stat-card">
          <div className="stat-number">
            {analyticsData.studentStats.completed.toLocaleString()}
          </div>
          <div className="stat-label">Ho√†n th√†nh kh√≥a</div>
          <div className="stat-percentage">
            {Math.round(
              (analyticsData.studentStats.completed /
                analyticsData.studentStats.total) *
                100
            )}
            %
          </div>
        </div>

        <div className="stat-card warning">
          <div className="stat-number">
            {analyticsData.studentStats.atRisk.toLocaleString()}
          </div>
          <div className="stat-label">C√≥ nguy c∆° b·ªè h·ªçc</div>
          <div className="stat-percentage">
            {Math.round(
              (analyticsData.studentStats.atRisk /
                analyticsData.studentStats.total) *
                100
            )}
            %
          </div>
        </div>
      </div>

      <div className="charts-container">
        <div className="chart-card">
          <h4>üìà ƒêƒÉng k√Ω m·ªõi theo ng√†y</h4>
          <div className="simple-chart">
            {chartData.enrollment?.map((day, index) => (
              <div key={index} className="chart-bar">
                <div
                  className="bar-fill"
                  style={{ height: `${(day.students / 25) * 100}%` }}
                  title={`${day.date}: ${day.students} h·ªçc vi√™n`}
                />
                <div className="bar-label">{day.date.split("/")[0]}</div>
              </div>
            ))}
          </div>
        </div>

        <div className="chart-card">
          <h4>üéØ Ph√¢n b·ªë tr·∫°ng th√°i h·ªçc vi√™n</h4>
          <div className="pie-chart">
            <div className="pie-item">
              <div className="pie-color active"></div>
              <span>ƒêang h·ªçc ({analyticsData.studentStats.active})</span>
            </div>
            <div className="pie-item">
              <div className="pie-color completed"></div>
              <span>Ho√†n th√†nh ({analyticsData.studentStats.completed})</span>
            </div>
            <div className="pie-item">
              <div className="pie-color at-risk"></div>
              <span>Nguy c∆° b·ªè h·ªçc ({analyticsData.studentStats.atRisk})</span>
            </div>
          </div>
        </div>
      </div>
    </div>
  );

  const renderLearningAnalytics = () => (
    <div className="analytics-section">
      <div className="section-header">
        <h3>üìö Th·ªëng k√™ t√¨nh h√¨nh h·ªçc t·∫≠p</h3>
        <button
          className="export-btn"
          onClick={() => exportData("learning")}
          disabled={exportLoading}
        >
          {exportLoading ? "‚è≥" : "üìä"} Xu·∫•t d·ªØ li·ªáu
        </button>
      </div>

      <div className="stats-overview">
        <div className="stat-card">
          <div className="stat-number">
            {analyticsData.learningStats.totalCourses}
          </div>
          <div className="stat-label">T·ªïng kh√≥a h·ªçc</div>
        </div>

        <div className="stat-card primary">
          <div className="stat-number">
            {analyticsData.learningStats.completionRate}%
          </div>
          <div className="stat-label">T·ª∑ l·ªá ho√†n th√†nh TB</div>
        </div>

        <div className="stat-card">
          <div className="stat-number">
            {analyticsData.learningStats.averageScore}/10
          </div>
          <div className="stat-label">ƒêi·ªÉm trung b√¨nh</div>
        </div>

        <div className="stat-card">
          <div className="stat-number">
            {analyticsData.learningStats.totalStudyHours.toLocaleString()}h
          </div>
          <div className="stat-label">T·ªïng gi·ªù h·ªçc</div>
        </div>

        <div className="stat-card success">
          <div className="stat-number">
            {analyticsData.learningStats.certificatesIssued}
          </div>
          <div className="stat-label">Ch·ª©ng ch·ªâ ƒë√£ c·∫•p</div>
        </div>
      </div>

      <div className="charts-container">
        <div className="chart-card full-width">
          <h4>üìä Ti·∫øn ƒë·ªô h·ªçc t·∫≠p theo ng√†y</h4>
          <div className="progress-chart">
            {chartData.progress?.map((day, index) => (
              <div key={index} className="progress-day">
                <div className="progress-bars">
                  <div
                    className="progress-bar completed"
                    style={{ height: `${(day.completed / 20) * 100}%` }}
                    title={`Ho√†n th√†nh: ${day.completed}`}
                  />
                  <div
                    className="progress-bar in-progress"
                    style={{ height: `${(day.inProgress / 30) * 100}%` }}
                    title={`ƒêang h·ªçc: ${day.inProgress}`}
                  />
                </div>
                <div className="progress-label">{day.date.split("/")[0]}</div>
              </div>
            ))}
          </div>
          <div className="chart-legend">
            <div className="legend-item">
              <div className="legend-color completed"></div>
              <span>Ho√†n th√†nh b√†i h·ªçc</span>
            </div>
            <div className="legend-item">
              <div className="legend-color in-progress"></div>
              <span>B·∫Øt ƒë·∫ßu h·ªçc</span>
            </div>
          </div>
        </div>
      </div>

      <div className="top-courses">
        <div className="section-header">
          <h4>üèÜ Top kh√≥a h·ªçc ph·ªï bi·∫øn</h4>
          <button
            className="export-btn small"
            onClick={() => exportData("courses")}
          >
            üìä Xu·∫•t
          </button>
        </div>

        <div className="courses-table">
          <table>
            <thead>
              <tr>
                <th>Kh√≥a h·ªçc</th>
                <th>H·ªçc vi√™n</th>
                <th>Ho√†n th√†nh</th>
                <th>ƒê√°nh gi√°</th>
                <th>Xu h∆∞·ªõng</th>
              </tr>
            </thead>
            <tbody>
              {analyticsData.topCourses.map((course, index) => (
                <tr key={course.id}>
                  <td>
                    <div className="course-info">
                      <span className="rank">#{index + 1}</span>
                      <span className="name">{course.name}</span>
                    </div>
                  </td>
                  <td>{course.students}</td>
                  <td>
                    <div className="completion-bar">
                      <div
                        className="completion-fill"
                        style={{ width: `${course.completion}%` }}
                      />
                      <span>{course.completion}%</span>
                    </div>
                  </td>
                  <td>
                    <div className="rating">‚≠ê {course.rating}</div>
                  </td>
                  <td>
                    <div className="trend positive">
                      üìà +{Math.floor(Math.random() * 20) + 5}%
                    </div>
                  </td>
                </tr>
              ))}
            </tbody>
          </table>
        </div>
      </div>
    </div>
  );

  const renderCommentModeration = () => (
    <div className="analytics-section">
      <div className="section-header">
        <h3>üõ°Ô∏è Ki·ªÉm duy·ªát b√¨nh lu·∫≠n</h3>
        <div className="moderation-stats">
          <span className="stat">
            Ch·ªù x·ª≠ l√Ω:{" "}
            {analyticsData.reports.filter((r) => r.status === "pending").length}
          </span>
          <span className="stat">
            ƒê√£ x·ª≠ l√Ω:{" "}
            {
              analyticsData.reports.filter((r) => r.status === "resolved")
                .length
            }
          </span>
        </div>
      </div>

      <div className="reports-list">
        {analyticsData.reports.map((report) => (
          <div key={report.id} className="report-card">
            <div className="report-header">
              <div className="report-info">
                <span
                  className="severity-badge"
                  style={{
                    backgroundColor: getReportSeverityColor(report.severity),
                  }}
                >
                  {report.severity === "high"
                    ? "Nghi√™m tr·ªçng"
                    : report.severity === "medium"
                    ? "Trung b√¨nh"
                    : "Nh·∫π"}
                </span>
                <span className="report-course">üìö {report.course}</span>
                <span className="report-time">
                  üïí {report.reportedAt.toLocaleString("vi-VN")}
                </span>
              </div>
              <span
                className="status-badge"
                style={{ backgroundColor: getReportStatusColor(report.status) }}
              >
                {report.status === "pending"
                  ? "Ch·ªù x·ª≠ l√Ω"
                  : report.status === "resolved"
                  ? "ƒê√£ x·ª≠ l√Ω"
                  : "T·ª´ ch·ªëi"}
              </span>
            </div>

            <div className="report-content">
              <div className="reported-comment">
                <strong>N·ªôi dung b·ªã b√°o c√°o:</strong>
                <p>"{report.content}"</p>
                <div className="comment-meta">
                  T√°c gi·∫£: <strong>{report.author}</strong> | B√°o c√°o b·ªüi:{" "}
                  <strong>{report.reportedBy}</strong>
                </div>
              </div>

              {report.status === "pending" && (
                <div className="moderation-actions">
                  <button
                    className="action-btn hide"
                    onClick={() => handleReportAction(report.id, "hidden")}
                  >
                    üëÅÔ∏è ·∫®n b√¨nh lu·∫≠n
                  </button>
                  <button
                    className="action-btn remove"
                    onClick={() => handleReportAction(report.id, "removed")}
                  >
                    üóëÔ∏è G·ª° b√¨nh lu·∫≠n
                  </button>
                  <button
                    className="action-btn reject"
                    onClick={() => handleReportAction(report.id, "rejected")}
                  >
                    ‚ùå T·ª´ ch·ªëi b√°o c√°o
                  </button>
                </div>
              )}

              {report.status === "resolved" && (
                <div className="resolution-info">
                  <div className="resolution-action">
                    H√†nh ƒë·ªông:{" "}
                    <strong>
                      {report.action === "hidden"
                        ? "ƒê√£ ·∫©n b√¨nh lu·∫≠n"
                        : report.action === "removed"
                        ? "ƒê√£ g·ª° b√¨nh lu·∫≠n"
                        : "T·ª´ ch·ªëi b√°o c√°o"}
                    </strong>
                  </div>
                  <div className="resolution-by">
                    X·ª≠ l√Ω b·ªüi: <strong>{report.resolvedBy}</strong> | L√∫c:{" "}
                    {report.resolvedAt?.toLocaleString("vi-VN")}
                  </div>
                </div>
              )}
            </div>
          </div>
        ))}
      </div>

      {analyticsData.reports.length === 0 && (
        <div className="empty-state">
          <p>‚úÖ Kh√¥ng c√≥ b√°o c√°o n√†o c·∫ßn x·ª≠ l√Ω</p>
        </div>
      )}
    </div>
  );

  return (
    <div className="analytics-dashboard">
      <div className="dashboard-header">
        <h2>üìä Th·ªëng k√™ & Ph√¢n t√≠ch</h2>
        <p>Dashboard qu·∫£n l√Ω v√† ph√¢n t√≠ch d·ªØ li·ªáu h·ªá th·ªëng</p>
      </div>

      <div className="dashboard-controls">
        <div className="tabs">
          <button
            className={activeTab === "students" ? "active" : ""}
            onClick={() => setActiveTab("students")}
          >
            üë• H·ªçc vi√™n
          </button>
          <button
            className={activeTab === "learning" ? "active" : ""}
            onClick={() => setActiveTab("learning")}
          >
            üìö H·ªçc t·∫≠p
          </button>
          {(user?.role === "admin" || user?.role === "teacher") && (
            <button
              className={activeTab === "moderation" ? "active" : ""}
              onClick={() => setActiveTab("moderation")}
            >
              üõ°Ô∏è Ki·ªÉm duy·ªát
            </button>
          )}
        </div>

        <div className="filters">
          <select
            value={dateRange}
            onChange={(e) => setDateRange(e.target.value)}
          >
            <option value="7days">7 ng√†y qua</option>
            <option value="30days">30 ng√†y qua</option>
            <option value="90days">90 ng√†y qua</option>
          </select>

          {user?.role === "admin" && (
            <select
              value={selectedCourse}
              onChange={(e) => setSelectedCourse(e.target.value)}
            >
              {courses.map((course) => (
                <option key={course.id} value={course.id}>
                  {course.name}
                </option>
              ))}
            </select>
          )}
        </div>
      </div>

      <div className="dashboard-content">
        {activeTab === "students" && renderStudentAnalytics()}
        {activeTab === "learning" && renderLearningAnalytics()}
        {activeTab === "moderation" && renderCommentModeration()}
      </div>
    </div>
  );
};

export default AnalyticsDashboard;
