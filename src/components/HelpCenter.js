import React, { useState } from "react";
import { useSelector } from "react-redux";

const HelpCenter = () => {
  const { userInfo } = useSelector((state) => state.auth);
  const [activeTab, setActiveTab] = useState("faq");
  const [searchQuery, setSearchQuery] = useState("");
  const [selectedCategory, setSelectedCategory] = useState("");
  const [ticketForm, setTicketForm] = useState({
    category: "",
    priority: "medium",
    subject: "",
    description: "",
    attachments: [],
  });

  // Mock FAQ data
  const [faqs] = useState([
    {
      id: 1,
      category: "account",
      question: "L√†m th·∫ø n√†o ƒë·ªÉ ƒë·ªïi m·∫≠t kh·∫©u?",
      answer:
        "B·∫°n c√≥ th·ªÉ ƒë·ªïi m·∫≠t kh·∫©u b·∫±ng c√°ch v√†o C√†i ƒë·∫∑t t√†i kho·∫£n > B·∫£o m·∫≠t > ƒê·ªïi m·∫≠t kh·∫©u. Nh·∫≠p m·∫≠t kh·∫©u c≈© v√† m·∫≠t kh·∫©u m·ªõi, sau ƒë√≥ click 'C·∫≠p nh·∫≠t'.",
    },
    {
      id: 2,
      category: "course",
      question: "T√¥i ƒë√£ thanh to√°n nh∆∞ng kh√¥ng th·ªÉ truy c·∫≠p kh√≥a h·ªçc?",
      answer:
        "N·∫øu b·∫°n ƒë√£ thanh to√°n nh∆∞ng ch∆∞a th·ªÉ truy c·∫≠p kh√≥a h·ªçc, vui l√≤ng ki·ªÉm tra email x√°c nh·∫≠n thanh to√°n. N·∫øu v·∫´n c√≥ v·∫•n ƒë·ªÅ, li√™n h·ªá b·ªô ph·∫≠n h·ªó tr·ª£ v·ªõi th√¥ng tin giao d·ªãch.",
    },
    {
      id: 3,
      category: "technical",
      question: "Video b√†i gi·∫£ng kh√¥ng t·∫£i ƒë∆∞·ª£c?",
      answer:
        "Th·ª≠ l√†m m·ªõi trang web ho·∫∑c x√≥a cache tr√¨nh duy·ªát. ƒê·∫£m b·∫£o k·∫øt n·ªëi internet ·ªïn ƒë·ªãnh. N·∫øu v·∫´n g·∫∑p l·ªói, h√£y th·ª≠ tr√¨nh duy·ªát kh√°c ho·∫∑c li√™n h·ªá h·ªó tr·ª£ k·ªπ thu·∫≠t.",
    },
    {
      id: 4,
      category: "payment",
      question: "C√°c ph∆∞∆°ng th·ª©c thanh to√°n n√†o ƒë∆∞·ª£c h·ªó tr·ª£?",
      answer:
        "Ch√∫ng t√¥i h·ªó tr·ª£ thanh to√°n qua th·∫ª t√≠n d·ª•ng/ghi n·ª£ (Visa, Mastercard), v√≠ ƒëi·ªán t·ª≠ (MoMo, ZaloPay), v√† chuy·ªÉn kho·∫£n ng√¢n h√†ng.",
    },
    {
      id: 5,
      category: "certificate",
      question: "L√†m th·∫ø n√†o ƒë·ªÉ nh·∫≠n ch·ª©ng ch·ªâ ho√†n th√†nh?",
      answer:
        "Sau khi ho√†n th√†nh 100% kh√≥a h·ªçc v√† ƒë·∫°t ƒëi·ªÉm t·ªëi thi·ªÉu c√°c b√†i ki·ªÉm tra, ch·ª©ng ch·ªâ s·∫Ω ƒë∆∞·ª£c t·ª± ƒë·ªông t·∫°o trong m·ª•c 'Ch·ª©ng ch·ªâ' c·ªßa b·∫°n.",
    },
    {
      id: 6,
      category: "refund",
      question: "Ch√≠nh s√°ch ho√†n ti·ªÅn nh∆∞ th·∫ø n√†o?",
      answer:
        "B·∫°n c√≥ th·ªÉ y√™u c·∫ßu ho√†n ti·ªÅn trong v√≤ng 30 ng√†y k·ªÉ t·ª´ ng√†y mua n·∫øu ch∆∞a ho√†n th√†nh qu√° 20% kh√≥a h·ªçc. Ho√†n ti·ªÅn s·∫Ω ƒë∆∞·ª£c x·ª≠ l√Ω trong 5-7 ng√†y l√†m vi·ªác.",
    },
  ]);

  const [guides] = useState([
    {
      id: 1,
      title: "H∆∞·ªõng d·∫´n s·ª≠ d·ª•ng c∆° b·∫£n",
      description: "T√¨m hi·ªÉu c√°ch s·ª≠ d·ª•ng c√°c t√≠nh nƒÉng c∆° b·∫£n c·ªßa n·ªÅn t·∫£ng",
      icon: "üìö",
      steps: [
        "ƒêƒÉng k√Ω v√† ƒëƒÉng nh·∫≠p t√†i kho·∫£n",
        "T√¨m ki·∫øm v√† ƒëƒÉng k√Ω kh√≥a h·ªçc",
        "H·ªçc b√†i v√† l√†m b√†i t·∫≠p",
        "Theo d√µi ti·∫øn ƒë·ªô h·ªçc t·∫≠p",
      ],
    },
    {
      id: 2,
      title: "Thanh to√°n v√† ho√†n ti·ªÅn",
      description: "H∆∞·ªõng d·∫´n v·ªÅ quy tr√¨nh thanh to√°n v√† ch√≠nh s√°ch ho√†n ti·ªÅn",
      icon: "üí≥",
      steps: [
        "Ch·ªçn ph∆∞∆°ng th·ª©c thanh to√°n",
        "Ho√†n t·∫•t giao d·ªãch",
        "Nh·∫≠n x√°c nh·∫≠n ƒëƒÉng k√Ω",
        "Y√™u c·∫ßu ho√†n ti·ªÅn (n·∫øu c·∫ßn)",
      ],
    },
    {
      id: 3,
      title: "S·ª≠ d·ª•ng t√≠nh nƒÉng c·ªông ƒë·ªìng",
      description: "T∆∞∆°ng t√°c v√† h·ªçc h·ªèi c√πng c·ªông ƒë·ªìng h·ªçc vi√™n",
      icon: "üë•",
      steps: [
        "Tham gia th·∫£o lu·∫≠n",
        "Chia s·∫ª kinh nghi·ªám",
        "ƒê·∫∑t c√¢u h·ªèi v√† nh·∫≠n h·ªó tr·ª£",
        "K·∫øt n·ªëi v·ªõi h·ªçc vi√™n kh√°c",
      ],
    },
  ]);

  const categories = [
    { value: "", label: "T·∫•t c·∫£" },
    { value: "account", label: "T√†i kho·∫£n" },
    { value: "course", label: "Kh√≥a h·ªçc" },
    { value: "payment", label: "Thanh to√°n" },
    { value: "technical", label: "K·ªπ thu·∫≠t" },
    { value: "certificate", label: "Ch·ª©ng ch·ªâ" },
    { value: "refund", label: "Ho√†n ti·ªÅn" },
  ];

  const filteredFAQs = faqs.filter((faq) => {
    const matchesSearch =
      searchQuery === "" ||
      faq.question.toLowerCase().includes(searchQuery.toLowerCase()) ||
      faq.answer.toLowerCase().includes(searchQuery.toLowerCase());

    const matchesCategory =
      selectedCategory === "" || faq.category === selectedCategory;

    return matchesSearch && matchesCategory;
  });

  const handleTicketSubmit = (e) => {
    e.preventDefault();

    if (!ticketForm.subject || !ticketForm.description) {
      alert("Vui l√≤ng ƒëi·ªÅn ƒë·∫ßy ƒë·ªß th√¥ng tin!");
      return;
    }

    // Mock submission
    alert(
      "Y√™u c·∫ßu h·ªó tr·ª£ ƒë√£ ƒë∆∞·ª£c g·ª≠i th√†nh c√¥ng! Ch√∫ng t√¥i s·∫Ω ph·∫£n h·ªìi trong v√≤ng 24 gi·ªù."
    );

    setTicketForm({
      category: "",
      priority: "medium",
      subject: "",
      description: "",
      attachments: [],
    });
  };

  const renderFAQ = () => (
    <div>
      <div style={{ marginBottom: "2rem" }}>
        <div
          style={{
            display: "flex",
            gap: "1rem",
            marginBottom: "1rem",
            flexWrap: "wrap",
          }}
        >
          <input
            type="text"
            value={searchQuery}
            onChange={(e) => setSearchQuery(e.target.value)}
            placeholder="T√¨m ki·∫øm c√¢u h·ªèi..."
            style={{
              flex: 1,
              minWidth: "300px",
              padding: "0.8rem",
              border: "1px solid #ddd",
              borderRadius: "6px",
              fontSize: "1rem",
            }}
          />

          <select
            value={selectedCategory}
            onChange={(e) => setSelectedCategory(e.target.value)}
            style={{
              padding: "0.8rem",
              border: "1px solid #ddd",
              borderRadius: "6px",
              fontSize: "1rem",
            }}
          >
            {categories.map((cat) => (
              <option key={cat.value} value={cat.value}>
                {cat.label}
              </option>
            ))}
          </select>
        </div>
      </div>

      <div>
        {filteredFAQs.length === 0 ? (
          <div style={{ textAlign: "center", padding: "3rem" }}>
            <div style={{ fontSize: "3rem", marginBottom: "1rem" }}>üîç</div>
            <h3>Kh√¥ng t√¨m th·∫•y c√¢u h·ªèi n√†o</h3>
            <p style={{ color: "#666" }}>
              Th·ª≠ thay ƒë·ªïi t·ª´ kh√≥a t√¨m ki·∫øm ho·∫∑c danh m·ª•c
            </p>
          </div>
        ) : (
          filteredFAQs.map((faq) => (
            <div
              key={faq.id}
              style={{
                background: "white",
                padding: "1.5rem",
                borderRadius: "10px",
                marginBottom: "1rem",
                boxShadow: "0 2px 10px rgba(0,0,0,0.1)",
              }}
            >
              <h4 style={{ margin: "0 0 1rem 0", color: "#333" }}>
                ‚ùì {faq.question}
              </h4>
              <p style={{ margin: 0, lineHeight: "1.6", color: "#666" }}>
                {faq.answer}
              </p>
              <div
                style={{
                  marginTop: "1rem",
                  paddingTop: "1rem",
                  borderTop: "1px solid #eee",
                }}
              >
                <span
                  style={{
                    background: "#f0f0f0",
                    padding: "0.3rem 0.8rem",
                    borderRadius: "15px",
                    fontSize: "0.8rem",
                    color: "#666",
                  }}
                >
                  {categories.find((c) => c.value === faq.category)?.label ||
                    faq.category}
                </span>
              </div>
            </div>
          ))
        )}
      </div>
    </div>
  );

  const renderGuides = () => (
    <div>
      <div className="dashboard">
        {guides.map((guide) => (
          <div key={guide.id} className="card">
            <div style={{ textAlign: "center", marginBottom: "1rem" }}>
              <div style={{ fontSize: "3rem", marginBottom: "0.5rem" }}>
                {guide.icon}
              </div>
              <h3 style={{ margin: "0 0 0.5rem 0" }}>{guide.title}</h3>
              <p style={{ color: "#666", margin: "0 0 1.5rem 0" }}>
                {guide.description}
              </p>
            </div>

            <div>
              <h4 style={{ margin: "0 0 1rem 0", fontSize: "1rem" }}>
                C√°c b∆∞·ªõc th·ª±c hi·ªán:
              </h4>
              <ol style={{ paddingLeft: "1.5rem" }}>
                {guide.steps.map((step, index) => (
                  <li
                    key={index}
                    style={{ marginBottom: "0.5rem", color: "#666" }}
                  >
                    {step}
                  </li>
                ))}
              </ol>
            </div>

            <button
              style={{
                width: "100%",
                padding: "0.8rem",
                background: "#667eea",
                color: "white",
                border: "none",
                borderRadius: "6px",
                cursor: "pointer",
                marginTop: "1rem",
              }}
            >
              Xem h∆∞·ªõng d·∫´n chi ti·∫øt
            </button>
          </div>
        ))}
      </div>
    </div>
  );

  const renderContact = () => (
    <div>
      <div style={{ marginBottom: "2rem" }}>
        <h3>G·ª≠i y√™u c·∫ßu h·ªó tr·ª£</h3>
        <p style={{ color: "#666" }}>
          N·∫øu kh√¥ng t√¨m th·∫•y c√¢u tr·∫£ l·ªùi, h√£y g·ª≠i y√™u c·∫ßu h·ªó tr·ª£ cho ch√∫ng t√¥i
        </p>
      </div>

      <div
        style={{ display: "grid", gridTemplateColumns: "2fr 1fr", gap: "2rem" }}
      >
        <form
          onSubmit={handleTicketSubmit}
          style={{
            background: "white",
            padding: "2rem",
            borderRadius: "10px",
            boxShadow: "0 4px 15px rgba(0,0,0,0.1)",
          }}
        >
          <div style={{ display: "flex", gap: "1rem", marginBottom: "1rem" }}>
            <div style={{ flex: 1 }}>
              <label
                style={{
                  display: "block",
                  marginBottom: "0.5rem",
                  fontWeight: "bold",
                }}
              >
                Danh m·ª•c *
              </label>
              <select
                value={ticketForm.category}
                onChange={(e) =>
                  setTicketForm({ ...ticketForm, category: e.target.value })
                }
                style={{
                  width: "100%",
                  padding: "0.8rem",
                  border: "1px solid #ddd",
                  borderRadius: "6px",
                  fontSize: "1rem",
                }}
                required
              >
                <option value="">Ch·ªçn danh m·ª•c</option>
                <option value="technical">S·ª± c·ªë k·ªπ thu·∫≠t</option>
                <option value="account">V·∫•n ƒë·ªÅ t√†i kho·∫£n</option>
                <option value="payment">Thanh to√°n</option>
                <option value="course">N·ªôi dung kh√≥a h·ªçc</option>
                <option value="other">Kh√°c</option>
              </select>
            </div>

            <div style={{ flex: 1 }}>
              <label
                style={{
                  display: "block",
                  marginBottom: "0.5rem",
                  fontWeight: "bold",
                }}
              >
                ƒê·ªô ∆∞u ti√™n
              </label>
              <select
                value={ticketForm.priority}
                onChange={(e) =>
                  setTicketForm({ ...ticketForm, priority: e.target.value })
                }
                style={{
                  width: "100%",
                  padding: "0.8rem",
                  border: "1px solid #ddd",
                  borderRadius: "6px",
                  fontSize: "1rem",
                }}
              >
                <option value="low">Th·∫•p</option>
                <option value="medium">Trung b√¨nh</option>
                <option value="high">Cao</option>
                <option value="urgent">Kh·∫©n c·∫•p</option>
              </select>
            </div>
          </div>

          <div style={{ marginBottom: "1rem" }}>
            <label
              style={{
                display: "block",
                marginBottom: "0.5rem",
                fontWeight: "bold",
              }}
            >
              Ti√™u ƒë·ªÅ *
            </label>
            <input
              type="text"
              value={ticketForm.subject}
              onChange={(e) =>
                setTicketForm({ ...ticketForm, subject: e.target.value })
              }
              placeholder="M√¥ t·∫£ ng·∫Øn g·ªçn v·∫•n ƒë·ªÅ c·ªßa b·∫°n"
              style={{
                width: "100%",
                padding: "0.8rem",
                border: "1px solid #ddd",
                borderRadius: "6px",
                fontSize: "1rem",
              }}
              required
            />
          </div>

          <div style={{ marginBottom: "1rem" }}>
            <label
              style={{
                display: "block",
                marginBottom: "0.5rem",
                fontWeight: "bold",
              }}
            >
              M√¥ t·∫£ chi ti·∫øt *
            </label>
            <textarea
              value={ticketForm.description}
              onChange={(e) =>
                setTicketForm({ ...ticketForm, description: e.target.value })
              }
              placeholder="M√¥ t·∫£ chi ti·∫øt v·∫•n ƒë·ªÅ b·∫°n g·∫∑p ph·∫£i..."
              style={{
                width: "100%",
                minHeight: "150px",
                padding: "0.8rem",
                border: "1px solid #ddd",
                borderRadius: "6px",
                fontSize: "1rem",
                resize: "vertical",
              }}
              required
            />
          </div>

          <div style={{ marginBottom: "2rem" }}>
            <label
              style={{
                display: "block",
                marginBottom: "0.5rem",
                fontWeight: "bold",
              }}
            >
              ƒê√≠nh k√®m file (t√πy ch·ªçn)
            </label>
            <input
              type="file"
              multiple
              style={{
                width: "100%",
                padding: "0.8rem",
                border: "1px solid #ddd",
                borderRadius: "6px",
              }}
            />
            <p
              style={{
                fontSize: "0.8rem",
                color: "#666",
                margin: "0.5rem 0 0 0",
              }}
            >
              H·ªó tr·ª£: JPG, PNG, PDF. T·ªëi ƒëa 5MB m·ªói file.
            </p>
          </div>

          <button
            type="submit"
            style={{
              width: "100%",
              padding: "1rem",
              background: "#667eea",
              color: "white",
              border: "none",
              borderRadius: "8px",
              cursor: "pointer",
              fontWeight: "bold",
              fontSize: "1rem",
            }}
          >
            G·ª≠i y√™u c·∫ßu h·ªó tr·ª£
          </button>
        </form>

        <div>
          <div
            style={{
              background: "white",
              padding: "2rem",
              borderRadius: "10px",
              boxShadow: "0 4px 15px rgba(0,0,0,0.1)",
              marginBottom: "1.5rem",
            }}
          >
            <h4 style={{ margin: "0 0 1rem 0" }}>üìû Li√™n h·ªá tr·ª±c ti·∫øp</h4>

            <div style={{ marginBottom: "1rem" }}>
              <strong>Hotline:</strong>
              <br />
              <span style={{ color: "#667eea" }}>1900 123 456</span>
              <br />
              <small style={{ color: "#666" }}>24/7 - Mi·ªÖn ph√≠</small>
            </div>

            <div style={{ marginBottom: "1rem" }}>
              <strong>Email:</strong>
              <br />
              <span style={{ color: "#667eea" }}>support@codelearn.com</span>
              <br />
              <small style={{ color: "#666" }}>Ph·∫£n h·ªìi trong 24 gi·ªù</small>
            </div>

            <div>
              <strong>Live Chat:</strong>
              <br />
              <button
                style={{
                  background: "#4CAF50",
                  color: "white",
                  border: "none",
                  padding: "0.5rem 1rem",
                  borderRadius: "6px",
                  cursor: "pointer",
                  marginTop: "0.5rem",
                }}
              >
                üó®Ô∏è B·∫Øt ƒë·∫ßu chat
              </button>
              <br />
              <small style={{ color: "#666" }}>Th·ª© 2-6: 8:00-18:00</small>
            </div>
          </div>

          <div
            style={{
              background: "white",
              padding: "2rem",
              borderRadius: "10px",
              boxShadow: "0 4px 15px rgba(0,0,0,0.1)",
            }}
          >
            <h4 style={{ margin: "0 0 1rem 0" }}>‚è±Ô∏è Th·ªùi gian ph·∫£n h·ªìi</h4>

            <div
              style={{
                display: "flex",
                justifyContent: "space-between",
                marginBottom: "0.5rem",
              }}
            >
              <span>Th·∫•p:</span>
              <span style={{ color: "#4CAF50" }}>2-3 ng√†y</span>
            </div>
            <div
              style={{
                display: "flex",
                justifyContent: "space-between",
                marginBottom: "0.5rem",
              }}
            >
              <span>Trung b√¨nh:</span>
              <span style={{ color: "#FF9800" }}>1-2 ng√†y</span>
            </div>
            <div
              style={{
                display: "flex",
                justifyContent: "space-between",
                marginBottom: "0.5rem",
              }}
            >
              <span>Cao:</span>
              <span style={{ color: "#F44336" }}>4-8 gi·ªù</span>
            </div>
            <div style={{ display: "flex", justifyContent: "space-between" }}>
              <span>Kh·∫©n c·∫•p:</span>
              <span style={{ color: "#F44336", fontWeight: "bold" }}>
                {"< 2 gi·ªù"}
              </span>
            </div>
          </div>
        </div>
      </div>
    </div>
  );

  return (
    <div className="main-container">
      <div
        style={{
          background: "white",
          padding: "1.5rem",
          borderRadius: "10px",
          marginBottom: "2rem",
          boxShadow: "0 4px 15px rgba(0,0,0,0.1)",
        }}
      >
        <h1 style={{ margin: "0 0 1rem 0" }}>üÜò Trung t√¢m tr·ª£ gi√∫p</h1>
        <p style={{ margin: 0, color: "#666" }}>
          T√¨m c√¢u tr·∫£ l·ªùi cho c√°c c√¢u h·ªèi th∆∞·ªùng g·∫∑p ho·∫∑c li√™n h·ªá v·ªõi ƒë·ªôi ng≈© h·ªó
          tr·ª£
        </p>
      </div>

      {/* Tabs */}
      <div style={{ marginBottom: "2rem" }}>
        <div
          style={{
            display: "flex",
            gap: "1rem",
            borderBottom: "2px solid #f0f0f0",
          }}
        >
          {[
            { key: "faq", label: "‚ùì C√¢u h·ªèi th∆∞·ªùng g·∫∑p" },
            { key: "guides", label: "üìñ H∆∞·ªõng d·∫´n s·ª≠ d·ª•ng" },
            { key: "contact", label: "üìû Li√™n h·ªá h·ªó tr·ª£" },
          ].map((tab) => (
            <button
              key={tab.key}
              onClick={() => setActiveTab(tab.key)}
              style={{
                padding: "1rem 2rem",
                background: "none",
                border: "none",
                borderBottom:
                  activeTab === tab.key
                    ? "3px solid #667eea"
                    : "3px solid transparent",
                color: activeTab === tab.key ? "#667eea" : "#666",
                cursor: "pointer",
                fontWeight: activeTab === tab.key ? "bold" : "normal",
                fontSize: "1rem",
              }}
            >
              {tab.label}
            </button>
          ))}
        </div>
      </div>

      {/* Tab Content */}
      {activeTab === "faq" && renderFAQ()}
      {activeTab === "guides" && renderGuides()}
      {activeTab === "contact" && renderContact()}
    </div>
  );
};

export default HelpCenter;
