import React, { useState } from "react";
import { useSelector } from "react-redux";
import { DEMO_ACCOUNTS } from "../../data/accounts";

const UserManagement = () => {
  const { userInfo } = useSelector((state) => state.auth);
  const [users, setUsers] = useState(DEMO_ACCOUNTS);
  const [showCreateForm, setShowCreateForm] = useState(false);
  const [selectedUser, setSelectedUser] = useState(null);
  const [formData, setFormData] = useState({
    username: "",
    fullName: "",
    email: "",
    role: "student",
    isActive: true,
  });

  const handleCreateUser = (e) => {
    e.preventDefault();
    const newUser = {
      ...formData,
      avatar:
        formData.role === "admin"
          ? "üë®‚Äçüíº"
          : formData.role === "teacher"
          ? "üë®‚Äçüè´"
          : "üë®‚Äçüéì",
      password: "123456", // Default password
    };

    setUsers([...users, newUser]);
    setFormData({
      username: "",
      fullName: "",
      email: "",
      role: "student",
      isActive: true,
    });
    setShowCreateForm(false);

    // In real app: send API request and log action
    console.log("Created user:", newUser);
  };

  const handleToggleUserStatus = (username) => {
    setUsers(
      users.map((user) =>
        user.username === username
          ? { ...user, isActive: !user.isActive }
          : user
      )
    );

    // Log action
    console.log(`Toggled status for user: ${username}`);
  };

  const handleDeleteUser = (username) => {
    if (window.confirm(`B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën x√≥a t√†i kho·∫£n ${username}?`)) {
      setUsers(users.filter((user) => user.username !== username));
      console.log(`Deleted user: ${username}`);
    }
  };

  const getRoleLabel = (role) => {
    const labels = {
      admin: "Qu·∫£n tr·ªã vi√™n",
      teacher: "Gi·∫£ng vi√™n",
      student: "H·ªçc vi√™n",
    };
    return labels[role] || role;
  };

  const getRoleColor = (role) => {
    const colors = {
      admin: "#dc2626",
      teacher: "#7c3aed",
      student: "#059669",
    };
    return colors[role] || "#6b7280";
  };

  if (userInfo?.role !== "admin") {
    return (
      <div className="main-container">
        <div className="card">
          <h3>‚ùå Kh√¥ng c√≥ quy·ªÅn truy c·∫≠p</h3>
          <p>B·∫°n kh√¥ng c√≥ quy·ªÅn truy c·∫≠p t√≠nh nƒÉng n√†y.</p>
        </div>
      </div>
    );
  }

  return (
    <div className="main-container">
      <div className="flex justify-between items-center mb-6">
        <h2>üë• Qu·∫£n l√Ω T√†i kho·∫£n Ng∆∞·ªùi d√πng</h2>
        <button
          className="btn btn-primary"
          onClick={() => setShowCreateForm(!showCreateForm)}
        >
          + T·∫°o t√†i kho·∫£n m·ªõi
        </button>
      </div>

      {/* Create User Form */}
      {showCreateForm && (
        <div className="card" style={{ marginBottom: "2rem" }}>
          <h3>‚ûï T·∫°o T√†i kho·∫£n M·ªõi</h3>
          <form
            onSubmit={handleCreateUser}
            style={{ display: "grid", gap: "1rem" }}
          >
            <div
              style={{
                display: "grid",
                gridTemplateColumns: "1fr 1fr",
                gap: "1rem",
              }}
            >
              <div className="form-group">
                <label>T√™n ƒëƒÉng nh·∫≠p:</label>
                <input
                  type="text"
                  value={formData.username}
                  onChange={(e) =>
                    setFormData({ ...formData, username: e.target.value })
                  }
                  required
                  placeholder="Nh·∫≠p t√™n ƒëƒÉng nh·∫≠p"
                />
              </div>

              <div className="form-group">
                <label>H·ªç v√† t√™n:</label>
                <input
                  type="text"
                  value={formData.fullName}
                  onChange={(e) =>
                    setFormData({ ...formData, fullName: e.target.value })
                  }
                  required
                  placeholder="Nh·∫≠p h·ªç v√† t√™n"
                />
              </div>
            </div>

            <div
              style={{
                display: "grid",
                gridTemplateColumns: "1fr 1fr",
                gap: "1rem",
              }}
            >
              <div className="form-group">
                <label>Email:</label>
                <input
                  type="email"
                  value={formData.email}
                  onChange={(e) =>
                    setFormData({ ...formData, email: e.target.value })
                  }
                  required
                  placeholder="Nh·∫≠p email"
                />
              </div>

              <div className="form-group">
                <label>Vai tr√≤:</label>
                <select
                  value={formData.role}
                  onChange={(e) =>
                    setFormData({ ...formData, role: e.target.value })
                  }
                >
                  <option value="student">H·ªçc vi√™n</option>
                  <option value="teacher">Gi·∫£ng vi√™n</option>
                  <option value="admin">Qu·∫£n tr·ªã vi√™n</option>
                </select>
              </div>
            </div>

            <div style={{ display: "flex", gap: "1rem" }}>
              <button type="submit" className="btn btn-primary">
                T·∫°o t√†i kho·∫£n
              </button>
              <button
                type="button"
                className="btn btn-secondary"
                onClick={() => setShowCreateForm(false)}
              >
                H·ªßy
              </button>
            </div>
          </form>
        </div>
      )}

      {/* Users Table */}
      <div className="card">
        <h3>üìã Danh s√°ch T√†i kho·∫£n ({users.length})</h3>

        <div style={{ overflowX: "auto" }}>
          <table
            style={{
              width: "100%",
              borderCollapse: "collapse",
              marginTop: "1rem",
            }}
          >
            <thead>
              <tr style={{ borderBottom: "2px solid #e5e7eb" }}>
                <th style={{ padding: "1rem", textAlign: "left" }}>Avatar</th>
                <th style={{ padding: "1rem", textAlign: "left" }}>
                  T√™n ƒëƒÉng nh·∫≠p
                </th>
                <th style={{ padding: "1rem", textAlign: "left" }}>H·ªç t√™n</th>
                <th style={{ padding: "1rem", textAlign: "left" }}>Email</th>
                <th style={{ padding: "1rem", textAlign: "left" }}>Vai tr√≤</th>
                <th style={{ padding: "1rem", textAlign: "left" }}>
                  Tr·∫°ng th√°i
                </th>
                <th style={{ padding: "1rem", textAlign: "left" }}>
                  H√†nh ƒë·ªông
                </th>
              </tr>
            </thead>
            <tbody>
              {users.map((user) => (
                <tr
                  key={user.username}
                  style={{ borderBottom: "1px solid #e5e7eb" }}
                >
                  <td style={{ padding: "1rem" }}>
                    <span style={{ fontSize: "1.5rem" }}>{user.avatar}</span>
                  </td>
                  <td style={{ padding: "1rem" }}>
                    <strong>{user.username}</strong>
                  </td>
                  <td style={{ padding: "1rem" }}>{user.fullName}</td>
                  <td style={{ padding: "1rem" }}>{user.email}</td>
                  <td style={{ padding: "1rem" }}>
                    <span
                      style={{
                        background: getRoleColor(user.role),
                        color: "white",
                        padding: "0.3rem 0.8rem",
                        borderRadius: "15px",
                        fontSize: "0.8rem",
                      }}
                    >
                      {getRoleLabel(user.role)}
                    </span>
                  </td>
                  <td style={{ padding: "1rem" }}>
                    <span
                      style={{
                        background: user.isActive ? "#10b981" : "#ef4444",
                        color: "white",
                        padding: "0.3rem 0.8rem",
                        borderRadius: "15px",
                        fontSize: "0.8rem",
                      }}
                    >
                      {user.isActive ? "Ho·∫°t ƒë·ªông" : "B·ªã kh√≥a"}
                    </span>
                  </td>
                  <td style={{ padding: "1rem" }}>
                    <div style={{ display: "flex", gap: "0.5rem" }}>
                      <button
                        className="btn btn-secondary"
                        style={{ fontSize: "0.8rem", padding: "0.3rem 0.6rem" }}
                        onClick={() => setSelectedUser(user)}
                      >
                        S·ª≠a
                      </button>
                      <button
                        className={`btn ${
                          user.isActive ? "btn-danger" : "btn-primary"
                        }`}
                        style={{ fontSize: "0.8rem", padding: "0.3rem 0.6rem" }}
                        onClick={() => handleToggleUserStatus(user.username)}
                      >
                        {user.isActive ? "Kh√≥a" : "M·ªü kh√≥a"}
                      </button>
                      {user.username !== userInfo?.username && (
                        <button
                          className="btn btn-danger"
                          style={{
                            fontSize: "0.8rem",
                            padding: "0.3rem 0.6rem",
                          }}
                          onClick={() => handleDeleteUser(user.username)}
                        >
                          X√≥a
                        </button>
                      )}
                    </div>
                  </td>
                </tr>
              ))}
            </tbody>
          </table>
        </div>
      </div>

      {/* Statistics */}
      <div className="stats-grid" style={{ marginTop: "2rem" }}>
        <div className="stat-card">
          <div className="stat-number">
            {users.filter((u) => u.role === "admin").length}
          </div>
          <div className="stat-label">Qu·∫£n tr·ªã vi√™n</div>
        </div>
        <div className="stat-card">
          <div className="stat-number">
            {users.filter((u) => u.role === "teacher").length}
          </div>
          <div className="stat-label">Gi·∫£ng vi√™n</div>
        </div>
        <div className="stat-card">
          <div className="stat-number">
            {users.filter((u) => u.role === "student").length}
          </div>
          <div className="stat-label">H·ªçc vi√™n</div>
        </div>
        <div className="stat-card">
          <div className="stat-number">
            {users.filter((u) => u.isActive).length}
          </div>
          <div className="stat-label">T√†i kho·∫£n ho·∫°t ƒë·ªông</div>
        </div>
      </div>
    </div>
  );
};

export default UserManagement;
